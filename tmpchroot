#!/bin/bash

if [ "$UID" != 0 ]; then
    echo "Sorry, you must be root to use this program!"
    exit 1
fi

maint=/mnt/btrfs/maint
envdir=/mnt/btrfs/chroot

subvolRoot=ROOT
subvolHome=HOME

# Comments to grep:
# - \K is a look-behind, not included in result.
# - (?=xxx) is a look-ahead, also not included.
# To sum it up: I get the string inside the brackets, which wil be the device
# path.
device=$(btrfs dev stats "$maint" | head -n1 | \
    grep -Po "\[\K.+(?=\])")

updateVariables() {
    newROOTname=${subvolRoot}-chroot-$envname
    newHOMEname=${subvolHome}-chroot-$envname
    newROOT=$envdir/$envname
}

prepare() {
    updateVariables

    if [ "$_nspawn" = 314 ]; then
        echo "INFO: systemd-nspawn is deprecated, please use chroot instead!"
        useNspawn
    else
        useChroot
    fi
}

useChroot() {
    bindmounts=(
    /dev
    /dev/pts
    /proc
    /sys
    /var/portage/distfiles
    /var/portage/packages
    /var/tmp/ccache
    /var/tmp/portage
    /var/tmp/portage_notmpfs
    )

    showTime() {
        echo "Entering $newROOT ..."
        chroot $newROOT "$@"
    }
}

useNspawn() {
    bindmounts=(
    /var/portage/distfiles
    /var/portage/packages
    /var/tmp/ccache
    /var/tmp/portage
    /var/tmp/portage_notmpfs
    )

    showTime() {
        echo "Entering $newROOT ..."
        systemd-nspawn --link-journal=no -D $newROOT "$@"
    }
}

mountbinds() {
    for i in ${bindmounts[@]}; do
        mount --bind "$i" "$newROOT/$i"
    done
}

createSnapshots() {
    mount $maint

    if [ ! -d $maint/$subvolRoot ]; then
        echo "ERROR: \"$maint/$subvolRoot\" does not exist!"
        umount $maint
        exit 1
    fi

    btrfs sub snap $maint/$subvolRoot $maint/$newROOTname
    if [ -d "$maint/$subvolHome" ]; then
        _home=12
        btrfs sub snap $maint/$subvolHome $maint/$newHOMEname
    fi
    umount $maint

    mkdir -p $newROOT
}

buildUp() {
    mount -o subvol=$newROOTname $device $newROOT
    if [ "$_home" = 12 ]; then
        mount -o subvol=$newHOMEname $device $newROOT/home
    fi

    echo "$envname" >"$newROOT/etc/debian_chroot"

    mountbinds
}

deblock() {
    perl -e "use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK); \
        fcntl(STDIN, F_SETFL, fcntl(STDIN, F_GETFL, 0) & ~O_NONBLOCK);"
}

tearDown() {
    deblock

    _processes=$(lsof $newROOT 2>/dev/null | \
        sed "1d" | awk '{print $2}' | sort -u)
    if [ -n "$_processes" ]; then
        kill -9 $_processes
    fi

    if grep -q "$(realpath -m "$newROOT")" /etc/mtab; then
        umount -R $newROOT
    fi
}

removeSnapshots() {
    if [ "$_yes" = "42" ]; then
        remove="yes"
    else
        read -p "Remove Environment \"$envname\"? " remove
    fi

    if [ "$remove" != "yes" ]; then
        echo "Environment \"$envname\" will NOT be deleted."
    else
        rmdir $newROOT

        mount $maint
        btrfs sub del $maint/$newROOTname
        if [ -d "$maint/HOME" ]; then
            btrfs sub del $maint/$newHOMEname
        fi
        umount $maint
    fi
}

# --- Main Routine ---

# Process arguments

args=( "$@" )
for i in $(seq 0 $((${#args} - 1))); do
    case ${args[$i]} in
        "")
            ;;
        list | test)
            action="${args[$i]}"
            unset args[$i]
            ;;
        create | continue)
            action="${args[$i]}"
            envname="${args[$(($i + 1))]}"
            unset args[$i] args[$(($i + 1))]
            ;;
        delete)
            action="${args[$i]}"
            unset args[$i]
            break
            ;;
        -y)
            _yes=42
            unset args[$i]
            ;;
        --subvol-root)
            subvolRoot="${args[$(($i + 1))]}"
            unset args[$i] args[$(($i + 1))]
            ;;
        --subvol-home)
            subvolHome="${args[$(($i + 1))]}"
            unset args[$i] args[$(($i + 1))]
            ;;
        --nspawn)
            _nspawn=314
            unset args[$i]
            ;;
        --)
            unset args[$i]
            break
            ;;
        *)
            echo "Unknown argument \"${args[$i]}\"!"
            exit 1
            ;;
    esac
done

case "$action" in
    "")
        envname=$(date +%s%N)
        prepare
        createSnapshots
        buildUp
        showTime "${args[@]}"
        tearDown
        removeSnapshots
        ;;
    list)
        if [[ -d "$envdir" && -n $(ls $envdir) ]]; then
            ls -1 $envdir
        else
            echo "No environments found."
        fi
        ;;
    create)
        if [ -z "$envname" ]; then
            echo "Please name an environment!"
        else
            prepare
            if [ -d "$newROOT" ]; then
                echo "There already is an environment \"$envname\"!"
            else
                createSnapshots
                buildUp
                showTime "${args[@]}"
                tearDown
                removeSnapshots
            fi
        fi
        ;;
    continue)
        if [ -z "$envname" ]; then
            echo "Please name an environment!"
        else
            prepare
            if [ ! -d "$newROOT" ]; then
                echo "There is no environment \"$envname\"!"
            else
                buildUp
                showTime "${args[@]}"
                tearDown
                removeSnapshots
            fi
        fi
        ;;
    delete)
        if [ -z "${args[*]}" ]; then
            echo "Please name an environment!"
        else
            for i in "${args[@]}"; do
                envname="$i"
                prepare
                if [ ! -d "$newROOT" ]; then
                    echo "There is no environment \"$i\"!"
                else
                    tearDown
                    removeSnapshots
                fi
            done
        fi
        ;;
    test)
        envname=$(date +%s%N)
        prepare
        createSnapshots
        buildUp
        ;;
esac
