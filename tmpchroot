#!/bin/bash

if [ "$UID" != 0 ]; then
    echo "Sorry, you must be root to use this program!"
    exit 1
fi

maint=/mnt/btrfs/maint
envdir=/mnt/btrfs/chroot

subvolRoot=ROOT
subvolHome=HOME

# Comments to grep:
# - \K is a look-behind, not included in result.
# - (?=xxx) is a look-ahead, also not included.
# To sum it up: I get the string inside the brackets, which wil be the device
# path.
device=$(btrfs dev stats "$maint" | head -n1 | \
    grep -Po "\[\K.+(?=\])")

updateVariables() {
    newROOTname=${subvolRoot}-chroot-$envname
    newHOMEname=${subvolHome}-chroot-$envname
    newROOT=$envdir/$envname
}

prepare() {
    updateVariables

    if [ "$_nspawn" = 314 ]; then
        echo "INFO: systemd-nspawn is deprecated, please use chroot instead!"
        useNspawn
    else
        useChroot
    fi
}

useChroot() {
    bindmounts=(
    /usr/portage
    /var/portage/distfiles
    /var/portage/packages
    /var/tmp/ccache
    )

    showTime() {
        echo "Mounting filesystems ..."

        mount -t proc iproc$envname $newROOT/proc
        mount -t sysfs isys$envname $newROOT/sys
        mount -t devtmpfs idev$envname $newROOT/dev

        mount -t devpts -o newinstance,gid=5,mode=666,ptmxmode=666 \
            idevpts$envname $newROOT/dev/pts
        sync
        rm -f $newROOT/dev/ptmx
        ln -sf pts/ptmx $newROOT/dev/ptmx

        mount -t tmpfs tmpfs $newROOT/dev/shm
        mount -t tmpfs tmpfs $newROOT/run

        touch $newROOT/var/run/utmp
        chgrp utmp $newROOT/var/run/utmp
        chmod 664 $newROOT/var/run/utmp

        portagetmp_mopts="$( \
            awk '$2 == "/var/tmp/portage" { print $4 }' /etc/fstab)"
        [ -n "$portagetmp_mopts" ] && \
            mount -t tmpfs -o $portagetmp_mopts tmpfs $newROOT/var/tmp/portage

        echo "Starting SSH server ..."

        # Only allow localhost to connect to localhost
        cat /root/.ssh/id_rsa.pub >"$newROOT/root/.ssh/authorized_keys"

        # Search for an unused port
        read lowerPort upperPort < /proc/sys/net/ipv4/ip_local_port_range
        while :; do
            port=$(shuf -i $lowerPort-$upperPort -n 1)
            # Returns *true* if port is *used*!
            # So a *free* port will return *false*!
            sh -c "exec 9>/dev/tcp/127.0.0.1/$port" 2>/dev/null || break
        done
        exec 9>&-

        chroot $newROOT sh -c " \
            /usr/sbin/sshd -p $port"

        echo "Entering $newROOT ..."

        ssh -o UserKnownHostsFile=/dev/null \
            -o StrictHostKeyChecking=no \
            -o LogLevel=quiet \
            -p $port -t localhost "$@"
    }
}

# Deprecated. Will be deleted soon.
useNspawn() {
    bindmounts=(
    /var/portage/distfiles
    /var/portage/packages
    /var/tmp/ccache
    /var/tmp/portage
    /var/tmp/portage_notmpfs
    )

    showTime() {
        echo "Entering $newROOT ..."
        systemd-nspawn --link-journal=no -D $newROOT "$@"
        deblock
    }
}

mountbinds() {
    for i in ${bindmounts[@]}; do
        mount --bind "$i" "$newROOT/$i"
    done
}

createSnapshots() {
    if [ ! -d $maint/$subvolRoot ]; then
        echo "ERROR: \"$maint/$subvolRoot\" does not exist!"
        exit 1
    fi

    btrfs sub snap $maint/$subvolRoot $maint/$newROOTname
    if [ "$_nohome" != 314 -a -d "$maint/$subvolHome" ]; then
        btrfs sub snap $maint/$subvolHome $maint/$newHOMEname
    fi

    mkdir -p $newROOT
}

mountIfFound() {
    local volname="$1"
    local mountpoint="$2"

    if btrfs sub list $maint | grep "$volname" -q; then
        mount -o subvol=$volname $device $newROOT/$mountpoint
    fi
}

buildUp() {
    mount -o subvol=$newROOTname $device $newROOT
    mountIfFound $newHOMEname /home

    echo "$envname" >"$newROOT/etc/debian_chroot"

    mountbinds
}

deblock() {
    perl -e "use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK); \
        fcntl(STDIN, F_SETFL, fcntl(STDIN, F_GETFL, 0) & ~O_NONBLOCK);"
}

tearDown() {
    _processes=$(lsof $newROOT 2>/dev/null | \
        sed "1d" | awk '{print $2}' | sort -u)
    if [ -n "$_processes" ]; then
        kill -15 $_processes
    fi

    sleep 2

    _processes=$(lsof $newROOT 2>/dev/null | \
        sed "1d" | awk '{print $2}' | sort -u)
    if [ -n "$_processes" ]; then
        kill -9 $_processes
    fi

    if grep -q "$(realpath -m "$newROOT")" /etc/mtab; then
        j=1
        while ! umount -R "$newROOT" 2>/dev/null; do
            echo "WARNING: Try $j of unmount failed for" \
                "$newROOT"

            if [ "$j" -ge 5 ]; then
                echo "ERROR: Giving up, please close all accesses to"
                echo "  $newROOT"
                echo "  manually and call"
                echo "  \`$0 delete $envname\`"
                echo "  afterwards!"
                exit 1
            fi

            j=$((j + 1))
            sleep 2
        done
        sync
    fi
}

deleteSnapIfFound() {
    local volname="$1"

    if btrfs sub list $maint | grep "$volname" -q; then
        btrfs sub del $maint/$volname
    fi
}

removeSnapshots() {
    if [ "$_yes" = "42" ]; then
        remove="yes"
    elif [ "$_no" = "42" ]; then
        remove="no"
    else
        read -p "Remove Environment \"$envname\"? " remove
    fi

    if [ "$remove" != "yes" ]; then
        echo "Environment \"$envname\" will NOT be deleted."
    else
        rmdir $newROOT

        btrfs sub del $maint/$newROOTname
        deleteSnapIfFound $newHOMEname
    fi
}

# --- Main Routine ---

# Process arguments

while [ $# -gt 0 ]; do
    key=$1
    shift

    case $key in
        list | test)
            action="$key"
            ;;
        create | continue)
            action="$key"
            envname="$1"
            shift
            ;;
        delete)
            action="$key"
            break
            ;;
        -y)
            if [ "$_no" = "42" ]; then
                echo "You cannot use -y and -n at the same time!"
                exit 1
            fi
            _yes=42
            ;;
        -n)
            if [ "$_yes" = "42" ]; then
                echo "You cannot use -y and -n at the same time!"
                exit 1
            fi
            _no=42
            ;;
        --subvol-root)
            subvolRoot="$1"
            shift
            ;;
        --subvol-home)
            subvolHome="$1"
            shift
            ;;
        --nspawn)
            _nspawn=314
            ;;
        --nohome)
            _nohome=314
            ;;
        --)
            break
            ;;
        *)
            echo "Unknown argument \"$key\"!"
            exit 1
            ;;
    esac
done

case "$action" in
    "")
        envname=$(date +%s%N)
        prepare
        createSnapshots
        buildUp
        showTime "$@"
        tearDown
        removeSnapshots
        ;;
    list)
        if [[ -d "$envdir" && -n $(ls $envdir) ]]; then
            ls -1 $envdir
        else
            echo "No environments found."
        fi
        ;;
    create)
        if [ -z "$envname" ]; then
            echo "Please name an environment!"
        else
            prepare
            if [ -d "$newROOT" ]; then
                echo "There already is an environment \"$envname\"!"
            else
                createSnapshots
                buildUp
                showTime "$@"
                tearDown
                removeSnapshots
            fi
        fi
        ;;
    continue)
        if [ -z "$envname" ]; then
            echo "Please name an environment!"
        else
            prepare
            if [ ! -d "$newROOT" ]; then
                echo "There is no environment \"$envname\"!"
            else
                buildUp
                showTime "$@"
                tearDown
                removeSnapshots
            fi
        fi
        ;;
    delete)
        if [ -z "$*" ]; then
            echo "Please name an environment!"
        else
            for i in "$@"; do
                envname="$i"
                prepare
                if [ ! -d "$newROOT" ]; then
                    echo "There is no environment \"$i\"!"
                else
                    tearDown
                    removeSnapshots
                fi
            done
        fi
        ;;
    test)
        envname=$(date +%s%N)
        prepare
        createSnapshots
        buildUp
        ;;
esac
